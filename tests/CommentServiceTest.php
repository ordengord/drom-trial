<?php

use CommentService\CommentService;
use CommentService\ServerRequest\CommentRequest;
use GuzzleHttp\Psr7\Utils;
use GuzzleHttp\Psr7\Response;
use CommentService\Comment\BaseComment;
use PHPUnit\Framework\TestCase;
use CommentService\Config;
use PHPUnit\Framework\MockObject\MockObject;
use CommentService\Comment\CommentList;

class CommentServiceTest extends TestCase
{
    protected MockObject $fakeClient;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->fakeClient = $this->getMockBuilder(\GuzzleHttp\Client::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['request'])
            ->getMock();
    }

    /**
     * @dataProvider toCreate()
     */
    public function testCreate($text, $name, $response, $arrayConfig)
    {
        $config = new Config($arrayConfig);
        $stream = Utils::streamFor(json_encode($response));
        $fakeResponse = new Response(200, ['Content-Type' => 'application/json'], $stream);

        $this->fakeClient->expects($this->once())
            ->method('request')
            ->will($this->returnValue($fakeResponse));

        $commentRequest = new CommentRequest($config->server(), 'create');

        $commentRequest->setClient($this->fakeClient);

        $serviceMock = $this->getMockBuilder(CommentService::class)
            ->setConstructorArgs([$arrayConfig])
            ->onlyMethods(['createRequest'])
            ->getMock();

        $serviceMock->method('createRequest')->willReturn($commentRequest);

        $result = $serviceMock->create(['text' => $text, 'name' => $name]);

        $this->assertEquals($result->getId(), $response['id']);
    }

    public function toCreate()
    {
        return [
            ['text1', 'name1', ['id' => 1], self::getConfig()],
            ['text2', 'name2', ['id' => 2], self::getConfig()],
            ['text3', 'name3', ['id' => 3], self::getConfig()]
        ];
    }

    /**
     * Изменяем текст комментария
     * @dataProvider toUpdate()
     */
    public function testUpdate($commentData, $arrayConfig)
    {
        $config = new Config($arrayConfig);
        $stream = Utils::streamFor('["OK"]'); // не имеет значения что вернет
        $fakeResponse = new Response(200, ['Content-Type' => 'application/json'], $stream);

        $this->fakeClient->expects($this->once())
            ->method('request')
            ->will($this->returnValue($fakeResponse));

        $comment = new BaseComment($commentData);

        $routeConfig = $config->server()->route('update');
        $routeConfig->uri = str_replace('{id}', $comment->getId(), $routeConfig->uri);

        $config->server()->setRouteConfig('update', $routeConfig);

        $commentRequest = new CommentRequest($config->server(), 'update');

        $commentRequest->setClient($this->fakeClient);

        $serviceMock = $this->getMockBuilder(CommentService::class)
            ->setConstructorArgs([$arrayConfig])
            ->onlyMethods(['createRequest'])
            ->getMock();

        $serviceMock->method('createRequest')->willReturn($commentRequest);

        $result = $serviceMock->update($commentData);

        $this->assertTrue($result instanceof BaseComment);
        $this->assertEquals($result->getText(), $commentData['text']);

        return $result;
    }

    public function toUpdate()
    {
        return [
            [['text' => 'text111', 'name' => 'name1', 'id' => 1], self::getConfig()],
            [['text' => 'text222', 'name' => 'name2', 'id' => 2], self::getConfig()],
            [['text' => 'text333', 'name' => 'name3', 'id' => 3], self::getConfig()],
        ];
    }

    /**
     * @dataProvider toIndex()
     */
    public function testIndex($commentsFromServer, $arrayConfig)
    {
        $config = new Config($arrayConfig);
        $stream = Utils::streamFor(json_encode($commentsFromServer)); // не имеет значения что вернет
        $fakeResponse = new Response(200, ['Content-Type' => 'application/json'], $stream);

        $this->fakeClient->expects($this->once())
            ->method('request')
            ->will($this->returnValue($fakeResponse));

        $commentRequest = new CommentRequest($config->server(), 'index');

        $commentRequest->setClient($this->fakeClient);

        $serviceMock = $this->getMockBuilder(CommentService::class)
            ->setConstructorArgs([$arrayConfig])
            ->onlyMethods(['createRequest'])
            ->getMock();

        $serviceMock->method('createRequest')->willReturn($commentRequest);

        $result = $serviceMock->index();

        $this->assertTrue($result instanceof CommentList);
        $this->assertEquals($result->count(), 3);
    }

    public function toIndex()
    {
        return [
            [[
                ['text' => 'text111', 'name' => 'name1', 'id' => 1],
                ['text' => 'text222', 'name' => 'name2', 'id' => 2],
                ['text' => 'text333', 'name' => 'name3', 'id' => 3]
            ], self::getConfig()],
        ];
    }

    public static function getConfig()
    {
        return require __DIR__ . '/../config/config.php';
    }
}