<?php

use CommentService\CommentService;
use CommentService\Serializer\CommentSerializerInterface;
use CommentService\Serializer\JsonCommentSerializer;
use CommentService\Serializer\XmlCommentSerializer;
use CommentService\ServerRequest\CommentRequest;
use GuzzleHttp\Psr7\Utils;
use GuzzleHttp\Psr7\Response;
use CommentService\Comment\BaseComment;
use PHPUnit\Framework\TestCase;
use CommentService\Config;
use PHPUnit\Framework\MockObject\MockObject;
use CommentService\Comment\CommentList;

class CommentServiceTest extends TestCase
{
    protected MockObject $fakeClient;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->fakeClient = $this->getMockBuilder(\GuzzleHttp\Client::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['request'])
            ->getMock();
    }

    /**
     * @dataProvider toCreate()
     */
    public function testCreate($text, $name, $response, $arrayConfig, CommentSerializerInterface $serializer, string $contentType)
    {
        $config = new Config($arrayConfig);
        $stream = Utils::streamFor($response);
        $fakeResponse = new Response(200, ['Content-Type' => "application/$contentType"], $stream);

        $this->fakeClient->expects($this->once())
            ->method('request')
            ->will($this->returnValue($fakeResponse));

        $commentRequest = new CommentRequest($config->server(), 'create', $serializer);

        $commentRequest->setClient($this->fakeClient);

        $serviceMock = $this->getMockBuilder(CommentService::class)
            ->setConstructorArgs([$serializer, $arrayConfig])
            ->onlyMethods(['createRequest'])
            ->getMock();

        $serviceMock->method('createRequest')->willReturn($commentRequest);

        $result = $serviceMock->create(['text' => $text, 'name' => $name]);

        $this->assertEquals($result->getId(), $serializer->deserialize($response)->getId());
    }

    public function toCreate()
    {
        $jsonResponseOne = json_encode([
            'name' => 'name1',
            'text' => 'text1',
            'id' => 1,
        ], true);

        $xmlResponseTwo = <<<XML
            <base-comment>
                <name>
                    name2
                </name>
                <text>
                    text2
                </text>
                <id>
                    2
                </id>
            </base-comment>
        XML;

        $jsonResponseThree = '{"name": "name3", "text": "text3", "id": 3}';

        return [
            ['text1', 'name1', $jsonResponseOne, self::getConfig(), new JsonCommentSerializer(), 'json'],
            ['text2', 'name2', $xmlResponseTwo, self::getConfig(), new XmlCommentSerializer(), 'xml'],
            ['text3', 'name3', $jsonResponseThree, self::getConfig(), new JsonCommentSerializer(), 'json']
        ];
    }

    /**
     * Изменяем текст комментария
     * @dataProvider toUpdate()
     */
    public function testUpdate($commentData, $response, $arrayConfig, CommentSerializerInterface $serializer, $contentType)
    {
        $config = new Config($arrayConfig);
        $stream = Utils::streamFor($response);
        $fakeResponse = new Response(200, ['Content-Type' => "application/$contentType"], $stream);

        $this->fakeClient->expects($this->once())
            ->method('request')
            ->will($this->returnValue($fakeResponse));

        $comment = new BaseComment($commentData['name'], $commentData['text'], $commentData['id']);

        $routeConfig = $config->server()->route('update');
        $routeConfig->uri = str_replace('{id}', $comment->getId(), $routeConfig->uri);

        $config->server()->setRouteConfig('update', $routeConfig);

        $commentRequest = new CommentRequest($config->server(), 'update', $serializer);

        $commentRequest->setClient($this->fakeClient);

        $serviceMock = $this->getMockBuilder(CommentService::class)
            ->setConstructorArgs([$serializer, $arrayConfig])
            ->onlyMethods(['createRequest'])
            ->getMock();

        $serviceMock->method('createRequest')->willReturn($commentRequest);

        $result = $serviceMock->update($commentData);

        $this->assertTrue($result instanceof BaseComment);
        $this->assertEquals($result->getText(), $commentData['text']);

        return $result;
    }

    public function toUpdate()
    {
        $jsonResponseOne = json_encode([
            'name' => 'name1',
            'text' => 'text111',
            'id' => 1,
        ], true);
        $xmlResponseTwo = <<<XML
            <base-comment>
                <name>
                    name2
                </name>
                <text>
                    text222
                </text>
                <id>
                    2
                </id>
            </base-comment>
        XML;

        $jsonResponseThree = '{"name": "name3", "text": "text333", "id": 3}';

        return [
            [['name' => 'name1', 'text' => 'text111', 'id' => 1], $jsonResponseOne, self::getConfig(), new JsonCommentSerializer(), 'json'],
            [['name' => 'name2', 'text' => 'text222', 'id' => 2], $xmlResponseTwo, self::getConfig(), new XmlCommentSerializer(), 'xml'],
            [['name' => 'name3', 'text' => 'text333', 'id' => 3], $jsonResponseThree, self::getConfig(), new JsonCommentSerializer(), 'json'],
        ];
    }

    /**
     * @dataProvider toIndex()
     */
    public function testIndex($response, $arrayConfig, CommentSerializerInterface $serializer)
    {
        $config = new Config($arrayConfig);
        $stream = Utils::streamFor($response);
        $fakeResponse = new Response(200, ['Content-Type' => 'application/json'], $stream);

        $this->fakeClient->expects($this->once())
            ->method('request')
            ->will($this->returnValue($fakeResponse));

        $commentRequest = new CommentRequest($config->server(), 'index', $serializer);

        $commentRequest->setClient($this->fakeClient);

        $serviceMock = $this->getMockBuilder(CommentService::class)
            ->setConstructorArgs([$serializer, $arrayConfig])
            ->onlyMethods(['createRequest'])
            ->getMock();

        $serviceMock->method('createRequest')->willReturn($commentRequest);

        $result = $serviceMock->index();

        $this->assertTrue($result instanceof CommentList);
        $this->assertEquals($result->count(), 3);
    }

    public function toIndex()
    {
        $xmlResponse = <<<XML
            <base-comments>
                <base-comment>
                    <name>
                        name1
                    </name>
                    <text>
                        text111
                    </text>
                    <id>
                        1
                    </id>
                </base-comment>
                <base-comment>
                    <name>
                        name2
                    </name>
                    <text>
                        text222
                    </text>
                    <id>
                        2
                    </id>
                </base-comment>
                <base-comment>
                    <name>
                        name3
                    </name>
                    <text>
                        text333
                    </text>
                    <id>
                        3
                    </id>
                </base-comment>
            </base-comments>
        XML;

        $jsonResponse = json_encode([
            ['name' => 'name1', 'text' => 'text111', 'id' => 1],
            ['name' => 'name2', 'text' => 'text222', 'id' => 2],
            ['name' => 'name3', 'text' => 'text333', 'id' => 3]
        ], true);

        return [
            [$jsonResponse, self::getConfig(), new JsonCommentSerializer()],
            [$xmlResponse, self::getConfig(), new XmlCommentSerializer()],
        ];
    }

    public static function getConfig()
    {
        return require __DIR__ . '/../config/config.php';
    }
}